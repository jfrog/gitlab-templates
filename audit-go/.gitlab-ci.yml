# Use this template to audit a Go project for security vulnerabilities with JFrog Xray.
# The `jf audit` command works as follows:
#
# 1. It creates a dependency tree for the project, including the direct and indirect (transitives) dependencies
# 2. Scans the dependency tree with JFrog Xray
# 3. Displays the vulnerabilities found
#
# Requirements:
# Configure 'ARTIFACTORY_VIRTUAL_REPO' variable with the virtual Go repository in JFrog Artifactory
# from which the dependencies can be resolved.

default:
  image: golang

include:
  - remote: "https://releases.jfrog.io/artifactory/jfrog-cli/gitlab/.setup-jfrog.yml"
jfrog-npm-audit:
  script:
    - !reference [.setup_jfrog, script]

    # Configure JFrog Artifactory repositories
    - jf go-config --repo-resolve $ARTIFACTORY_VIRTUAL_REPO

    # Audit Go project
    - jf audit
